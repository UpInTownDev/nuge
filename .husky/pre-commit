#!/usr/bin/env sh

# Pre-commit hook for Nuge project
# Runs linting, type checking, and formatting on staged files

# Enable debugging if DEBUG=true is set
if [ "$DEBUG" = "true" ]; then
  set -x
fi

node -e "
const { Logger, executeCommand, getGitInfo, hasChangesInPaths, Timer } = require('./scripts/git-hooks-utils.js');

async function runPreCommit() {
  const timer = new Timer();
  Logger.title('PRE-COMMIT HOOK');
  
  // Get git information
  const gitInfo = getGitInfo();
  if (!gitInfo) {
    process.exit(1);
  }
  
  Logger.info(\`Branch: \${gitInfo.branch}\`, 'GIT');
  Logger.info(\`Staged files: \${gitInfo.stagedFiles.length}\`, 'GIT');
  
  if (gitInfo.stagedFiles.length === 0) {
    Logger.warning('No staged files found. Skipping pre-commit checks.');
    process.exit(0);
  }

  let hasErrors = false;
  let step = 1;
  const totalSteps = 4;

  // Step 1: Run lint-staged for formatting and linting
  Logger.step(step++, totalSteps, 'Running lint-staged...');
  const lintStagedResult = executeCommand('npx lint-staged', {
    description: 'Lint and format staged files'
  });
  
  if (!lintStagedResult.success) {
    Logger.error('Lint-staged failed', 'LINT');
    hasErrors = true;
  } else {
    Logger.success('Lint-staged completed successfully', 'LINT');
  }

  // Step 2: Type checking for mobile (temporarily disabled due to config issues)
  const hasMobileChanges = hasChangesInPaths(gitInfo.stagedFiles, ['^mobile/']);
  if (hasMobileChanges) {
    Logger.step(step++, totalSteps, 'Skipping mobile type check (config issues)...');
    Logger.info('Mobile type checking disabled - needs Expo dependencies', 'TYPE');
  } else {
    Logger.info('No mobile changes detected. Skipping mobile type check.', 'TYPE');
    step++;
  }

  // Step 3: Type checking for backend (if backend files changed)
  const hasBackendChanges = hasChangesInPaths(gitInfo.stagedFiles, ['^backend/']);
  if (hasBackendChanges) {
    Logger.step(step++, totalSteps, 'Type checking backend...');
    const backendTypeCheck = executeCommand('cd backend && npx tsc --noEmit', {
      description: 'Backend TypeScript type checking'
    });
    
    if (!backendTypeCheck.success) {
      Logger.error('Backend type checking failed', 'TYPE');
      hasErrors = true;
    } else {
      Logger.success('Backend type checking passed', 'TYPE');
    }
  } else {
    Logger.info('No backend changes detected. Skipping backend type check.', 'TYPE');
    step++;
  }

  // Step 4: Check for sensitive information
  Logger.step(step++, totalSteps, 'Checking for sensitive information...');
  
  let foundSensitiveData = false;
  
  // Only check actual code files, skip configuration and documentation
  const filesToCheck = gitInfo.stagedFiles.filter(file => 
    file.match(/\.(ts|tsx|js|jsx|env)$/) && 
    !file.includes('node_modules') && 
    !file.includes('package-lock.json') &&
    !file.includes('.husky') &&
    !file.includes('.github') &&
    !file.endsWith('.md')
  );
  
  if (filesToCheck.length === 0) {
    Logger.success('No code files to check for sensitive data', 'SECURITY');
  } else {
    const realSecretsPatterns = [
      /(?:^|[^a-zA-Z0-9_])(api[_-]?key|secret|password|token)\s*[:=]\s*['""][^'""\\s]{8,}['""]|(?:^|[^a-zA-Z0-9_])(api[_-]?key|secret|password|token)\s*[:=]\s*[a-zA-Z0-9_-]{16,}/i,
      /-----BEGIN\s+(RSA\s+)?PRIVATE\s+KEY-----/i
    ];
    
    for (const file of filesToCheck) {
      try {
        const content = require('fs').readFileSync(file, 'utf8');
        for (const pattern of realSecretsPatterns) {
          if (pattern.test(content)) {
            Logger.warning(\`Potential sensitive data found in \${file}\`, 'SECURITY');
            foundSensitiveData = true;
            break;
          }
        }
      } catch (error) {
        // File might not exist or be readable, skip
      }
    }
    
    if (!foundSensitiveData) {
      Logger.success('No sensitive information detected', 'SECURITY');
    }
  }

  // Summary
  Logger.subtitle('PRE-COMMIT SUMMARY');
  if (hasErrors) {
    Logger.error(\`Pre-commit checks failed after \${timer.elapsedFormatted()}\`, 'RESULT');
    Logger.info('Fix the errors above and try committing again.', 'HINT');
    process.exit(1);
  } else {
    Logger.success(\`All pre-commit checks passed in \${timer.elapsedFormatted()}\`, 'RESULT');
    if (foundSensitiveData) {
      Logger.warning('⚠️  Potential sensitive data detected. Please review before committing.', 'WARNING');
    }
    process.exit(0);
  }
}

runPreCommit().catch(error => {
  console.error('Pre-commit hook failed:', error);
  process.exit(1);
});
"
